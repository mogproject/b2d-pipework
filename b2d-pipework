#!/bin/bash
#
# boot2docker + pipework installtion helper script for Mac
#

SCRIPT_DIR=$(cd $(dirname $0); pwd)
B2D_CFG_SRC=$SCRIPT_DIR/conf
B2D_CFG_DIR=$HOME/.boot2docker

KEY_NAME=id_rsa
PRIVATE_KEY=$B2D_CFG_DIR/$KEY_NAME
PUBLIC_KEY=$PRIVATE_KEY.pub
BOOTLOCAL_TMP=/tmp/bootlocal.sh

B2D_SSH="boot2docker ssh -i $PRIVATE_KEY"
B2D_SCP="scp -i $PRIVATE_KEY -P 2022 -o StrictHostKeyChecking=no"

PIPEWORK_URL=https://raw.githubusercontent.com/jpetazzo/pipework/master/pipework

HOSTONLY_SUBNET=192.168.99.0
HOSTONLY_SUBNET_LEN=24
HOSTONLY_VBOX_IF=192.168.99.1
HOSTONLY_B2D_IF=192.168.99.2


check_os() {
  if [[ ! $(uname -s) == "Darwin" ]]; then
    echo 'Sorry, this script is for Mac only.'
    return 1
  fi
}

clean() {
  # Remove current VM
  type boot2docker >/dev/null 2>&1 && {
    boot2docker status && (boot2docker stop || return 1)
    boot2docker status | grep "not exist" || (boot2docker delete || return 1)
  }

  # Remove Homebrew's formula
  [[ -n $(brew ls --versions docker) ]] && (brew remove docker || return 1)
  [[ -n $(brew ls --versions boot2docker) ]] && (brew remove boot2docker || return 1)

  # Remove executables
  rm -f /usr/local/bin/docker /usr/local/bin/boot2docker || return 1

  # Remove config directory
  rm -fr $B2D_CFG_DIR || return 1

  # Reset known_hosts file
  if [[ -f $HOME/.ssh/known_hosts ]]; then
    cp -f $HOME/.ssh/known_hosts $HOME/.ssh/known_hosts.bk || return 1
    grep -v '^\[localhost\]:2022 ' $HOME/.ssh/known_hosts.bk > $HOME/.ssh/known_hosts || return 1
  fi
}

install_() {
  # Install using Homebrew
  brew install docker boot2docker || return 1

  mkdir -p $B2D_CFG_DIR || return 1
  cp -f $B2D_CFG_SRC/profile $B2D_CFG_DIR/ || return 1

  # Create docker host VM
  boot2docker init || return 1

  # Add host-only network
  create_hostonly_if || return 1

  # Boot VM
  boot2docker up || return 1
  sleep 5

  install_ssh_key || return 1
  setup_bootlocal || return 1
  install_pipework || return 1

  # Reboot VM
  boot2docker restart || return 1
  sleep 5
}

check_vbox_hostonlyif() {
  # Prints the name of VirtualBox's host-only adapter which has specific IP settings.
  # If not found, prints nothing.
  #
  # arguments
  # $1: ip address of the gateway
  # $2: network mask
  #
  # example
  # check_vbox_hostonlyif 192.168.33.1 255.255.255.0
  # => output
  #   the adapter name like 'vboxnetN' if there is an adapter with the address 192.168.33.1/24,
  #   nothing otherwise

  SCRIPT_FLATTEN='\
    /^Name:/ { printf $2 } \
    /^IPAddress:/ { printf "\t" $2 } \
    /^NetworkMask:/ { printf "\t" $2 "\n" } \
  '
  SCRIPT_FILTER='$2=="'"$1"'" && $3=="'"$2"'" { print $1 }'

  VBoxManage list -l hostonlyifs | awk "$SCRIPT_FLATTEN" | awk -F"\t" "$SCRIPT_FILTER"
}

create_hostonly_if() {
  # Required: VM should be down

  # Setup VirtualBox's interface
  if_name=$(check_vbox_hostonlyif $HOSTONLY_VBOX_IF $HOSTONLY_NETMASK)
  if [[ ! -n $if_name ]]; then
    echo 'Creating new host-only network to VirtualBox.'
    if_name=$(VBoxManage hostonlyif create | awk '/successfully created/{print $2}' | sed -e "s/'//g")
    if [[ ! -n $if_name ]]; then return 1; fi
    VBoxManage hostonlyif ipconfig $if_name --ip $HOSTONLY_VBOX_IF --netmask $HOSTONLY_NETMASK || return 1
  fi

  # Setup VM's interface
  VBoxManage modifyvm boot2docker-vm --nic2 hostonly --hostonlyadapter2 $if_name || return 1
  VBoxManage modifyvm boot2docker-vm --nicpromisc2 allow-all || return 1
}

install_ssh_key() {
  # Required: VM should be up

  # Create SSH key pair
  if [[ ! -f $PRIVATE_KEY ]]; then
    ssh-keygen -P '' -t rsa -f $PRIVATE_KEY || return 1
  fi

  # Write to remote authorised_keys directory (for the first time)
  expect -c '
    spawn boot2docker ssh "mkdir -p .ssh"
    expect "password:" { send -- "tcuser\r" }
    expect eof
  ' || return 1
  
  # Upload public key to VM
  expect -c '
    spawn scp -P 2022 -o StrictHostKeyChecking=no '"$PUBLIC_KEY"' docker@localhost:.ssh/authorized_keys
    expect "password:" { send -- "tcuser\r" }
    expect eof
  ' || return 1

  # Install file in VM
  $B2D_SSH sudo install -D -o root -g root -m 644 .ssh/authorized_keys /var/lib/boot2docker/keys/$KEY_NAME.pub
}

setup_bootlocal() {
  # Make customized with bootlocal.sh
  sed -e "s%{{HOSTONLY_VBOX_ADDRESS}}%$HOSTONLY_B2D_IF/$HOSTONLY_SUBNET_LEN%g" \
    $B2D_CFG_SRC/bootlocal.sh > $B2D_CFG_SRC/bootlocal.sh.tmp || return 1

  # Upload bootlocal.sh to VM
  $B2D_SCP $B2D_CFG_SRC/bootlocal.sh.tmp docker@localhost:bootlocal.sh || return 1

  # Remove temporary file
  rm -f $B2D_CFG_SRC/bootlocal.sh.tmp || return 1

  # Install file in VM
  $B2D_SSH sudo install -o root -g root -m 755 ./bootlocal.sh /var/lib/boot2docker/bootlocal.sh
}

install_pipework() {
  $B2D_SSH " \
    sudo mkdir -p /var/lib/boot2docker/bin && \
    sudo curl -o /var/lib/boot2docker/bin/pipework $PIPEWORK_URL && \
    sudo chmod +x /var/lib/boot2docker/bin/pipework"
}

check() {
  docker -H=tcp://127.0.0.1:4243 version || return 1

  echo
  echo "Congratulations!"
  echo "Your Docker seems to be all set."
  echo
}

run() {
  ip=$1
  shift
  cid=$(docker -H tcp://127.0.0.1:4243 run -d -t $@) || return 1
  $B2D_SSH sudo pipework eth1 $cid $ip/$HOSTONLY_SUBNET_LEN || return 1
  echo "Launched container: ${cid:0:12} -> $ip/$HOSTONLY_SUBNET_LEN"
}

subnet_len_to_octs() {
  # Prints IPv4 octets string converted from mask length
  #
  # arguments
  # $1: length of the mask (should be between 0 and 32, inclusive)
  # example
  # mask_len_to_octs 24
  # => output 255.255.255.0

  ret=
  x=$(( (1 << 32) - (1 << (32 - $1)) ))

  for i in {0..3}; do
    [[ i -ne 0 ]] && ret=".$ret"
    ret=$(((x >> (8 * i)) % 256))"$ret"
  done

  echo $ret
  return
}

#
# Main
#

check_os

HOSTONLY_NETMASK=$(subnet_len_to_octs $HOSTONLY_SUBNET_LEN)

case $1 in
  clean) clean;;
  install) install_ && check;;
  run) shift; run $@;;
  *) echo "Usage: $0 [{clean|install|run}]"; exit 1
esac

